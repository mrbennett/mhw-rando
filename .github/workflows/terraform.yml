# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.

name: 'Terraform'

on:
  push:
    paths: infra/*
    branches:
    - main
  pull_request:
    paths: infra/*

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: infra/

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.4

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.AzureClientId }}
        ARM_CLIENT_SECRET: ${{ secrets.AzureClientSecret }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AzureSubscriptionId }}
        ARM_TENANT_ID: ${{ secrets.AzureTenantId }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      env:
        ARM_CLIENT_ID: ${{ secrets.AzureClientId }}
        ARM_CLIENT_SECRET: ${{ secrets.AzureClientSecret }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AzureSubscriptionId }}
        ARM_TENANT_ID: ${{ secrets.AzureTenantId }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.AzureClientId }}
        ARM_CLIENT_SECRET: ${{ secrets.AzureClientSecret }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AzureSubscriptionId }}
        ARM_TENANT_ID: ${{ secrets.AzureTenantId }}
